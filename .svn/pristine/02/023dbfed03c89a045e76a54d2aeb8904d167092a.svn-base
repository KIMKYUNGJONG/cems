import axios from 'axios';
import React, { useEffect, useState, useRef } from 'react';
import { useAsync } from 'react-async';
import { apiGet, ipGet } from '../lib/api';
import Report from '../pages/Report/Report';
import { Data } from '../constant/Dashboard';

/**
 * 외부 api 호출
 */
const fetchClusterData = async () => {
  const res = await apiGet({
    url: 'https://gorest.co.in/public-api/comments',
  });
  return res.data;
};

function ReportContainer(props: any) {
  /**
   * 외부api useAsync
   */
  const clusterData = useAsync({
    deferFn: fetchClusterData,
    initialValue: [],
  });

  /**
 * 차트 api 호출
 */
  const [lineData, setData] = useState([]);
  useEffect(() => {
    asyncFetch();
  }, []);
  const asyncFetch = () => {
    fetch('https://gw.alipayobjects.com/os/bmw-prod/55424a73-7cb8-4f79-b60d-3ab627ac5698.json') // 더미데이터
      .then((response) => response.json())
      .then((json) => setData(json))
      .catch((error) => {
        console.log('fetch data failed', error);
      });
  };

  /**
   * 백단 테스트용 api 입니다
   * api 정의 파일은 lib/api.ts에 있습니다.
   */
  const [ip, setIp] = useState('');
  function callback(data: any) {
    setIp(data);
  }
  useEffect(
    () => {
      // 클라이언트의 IP주소를 알아내는 백엔드의 함수를 호출합니다.
      ipGet('/ip', callback);
    }, [ip]
  );
  // demo api 끝단

  /**
   * 웹소켓 통신 api 입니다
   */
  const URL = 'ws://localhost:5000';
  const [uiData, setUiData] = useState<Data[]>([]);
  const [ws, setWs] = useState<WebSocket>();
  const __bootstrap_async__ = () => {
    setWs(new WebSocket(URL, ['Token', 'token_body_here']));
  };
  useEffect(() => {
    setTimeout(() => {
      if (!ws) {
        __bootstrap_async__();
      } else {
        ws.onopen = () => {
          console.log('opened');
        };
        ws.onmessage = (event) => {
          setUiData((old) => [event.data, ...old].splice(0, 9));
          //htView component api 사용
          //data pushed 시 call updateDM()
          //문제 있음
          //htView.current.updateDM(([{"tag": "dataPanel1", "data":[ui_data]}]););
        };
        ws.onerror = (err) => {
          console.log(err);
        };
        ws.onclose = () => {
          console.log('closed');
        };
      }

      return () => {
        ws?.close();
      };
    }, 0);
  }, [ws]);

  const data: Data =
  {
    project: 'PJ_0917',
    aplicationId: '11',
    coords: ['10.15151', '10.15151'],
    regDate: '2021-08-30',
    userId: 'sma_01',
    sms: ['010-666-6666', '010-555-5555'],
    note: 'sample demo'
  };

  useEffect(() => {
    clusterData.run();
  }, []);

  return <Report ip={ip} dummy={data} data={clusterData.data.data} lineData={lineData} />;
}

export default ReportContainer;
